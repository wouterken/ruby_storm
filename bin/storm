#!/usr/bin/env ruby
require 'thread_safe'

module Storm

  require File.expand_path("./../../vendor/inflector", __FILE__)
  require File.expand_path("./../../application/application", __FILE__)

  def self.perform!(namespace, args=ARGV)
    begin
      names = namespace.to_s.split(':')
      generator(names)

      if klass = generator(names)
        Storm.load_environment unless [
          "Storm::Init",
          "Storm::Version"
        ].include? klass.name
        klass.start(args[1..-1])
      else
        puts "Could not find generator '#{names}'. "
      end
    rescue Exception => e
      puts e.message
      return 1
    end
    return 0
  end

  def self.load_environment
    puts "Loading storm environment"
    require 'active_record'
    require 'bundler'
    require 'awesome_print'
    ::Bundler.require(:default, :development)
    Dir["./*.rb"].each{|file| next if /db\// =~ file; require file }
    Dir["./**/*.rb"].each{|file| next if /db\// =~ file; require file }
  end

  def self.connect
    ActiveRecord::Base.establish_connection YAML.load_file('./db/database.yml')[Storm::STORM_ENV]
    begin
      require 'pry'
      Pry.color = true
      Pry.config.print = proc { |output, value| output.puts "=> #{value.ai}" }
    rescue Exception => e
      puts e
    end
  end

  def self.generator(names)
    generators_and_paths = names.map{|name|
      [name.capitalize,name.downcase]
    }

    klass = ["","Storm",generators_and_paths.flat_map(&:first)].flatten.join("::")
    path = File.expand_path("./../../generators/#{generators_and_paths.map(&:last).join("/")}.rb", __FILE__)
    if File.exists?(path)
      require path
      return eval(klass)
    end
  end
end

exit Storm::perform!(ARGV[0])